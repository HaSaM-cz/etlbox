using ALE.ETLBox;
using ALE.ETLBox.ConnectionManager;
using ALE.ETLBox.ControlFlow;
using ALE.ETLBox.DataFlow;
using ALE.ETLBox.Helper;
using ALE.ETLBox.Logging;
using ALE.ETLBoxTests.Fixtures;
using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using Microsoft.Data.SqlClient;
using System.IO;
using System.Threading.Tasks;
using Xunit;

namespace ALE.ETLBoxTests.DataFlowTests
{
    [Collection("Connection Manager")]
    public class SqlConnectionManagerLeaveOpenTests
    {
        public string ConnectionStringParameter => Config.SqlConnection.RawConnectionString("ConnectionManager");
        public SqlConnectionManagerLeaveOpenTests(ConnectionManagerFixture dbFixture)
        {
        }

        void AssertOpenConnectionCount(int allowedOpenConnections, string connectionString)
        {
            SqlConnectionString conString = new SqlConnectionString(connectionString);
            SqlConnectionManager master = new SqlConnectionManager(conString.CloneWithMasterDbName());
            string dbName = conString.DbName;
            int? openConnections =
                new SqlTask("Count open connections",
                $@"SELECT COUNT(dbid) as NumberOfConnections FROM sys.sysprocesses
                    WHERE dbid > 0 and DB_NAME(dbid) = '{dbName}'")
                { ConnectionManager = master, DisableLogging = true }
                .ExecuteScalar<int>()
                .Value;
            Assert.Equal(allowedOpenConnections, openConnections);
        }

        [Fact]
        public void TestLeaveConnectionOpen()
        {
            //Arrange
            SqlConnectionManager con = new SqlConnectionManager(ConnectionStringParameter)
            {
                LeaveOpen = true
            };

            //Act
            AssertOpenConnectionCount(0, ConnectionStringParameter);
            Assert.True(con.State == null);
            con.Open();
            Assert.True(con.State == System.Data.ConnectionState.Open);
            AssertOpenConnectionCount(1, ConnectionStringParameter);
            con.Open();
            AssertOpenConnectionCount(1, ConnectionStringParameter);
            Assert.True(con.State == System.Data.ConnectionState.Open);
            AssertOpenConnectionCount(1, ConnectionStringParameter);
            SqlConnection.ClearAllPools();

            //Assert
            AssertOpenConnectionCount(1, ConnectionStringParameter);
            con.Close();
            SqlConnection.ClearAllPools();
            AssertOpenConnectionCount(0, ConnectionStringParameter);
        }

        [Fact]
        public void TestLeaveConnectionOpenWithSqlTask()
        {
            //Arrange
            SqlConnectionManager con = new SqlConnectionManager(ConnectionStringParameter)
            {
                LeaveOpen = true
            };

            //Act
            AssertOpenConnectionCount(0, ConnectionStringParameter);
            Assert.True(con.State == null);
            SqlTask.ExecuteNonQuery(con, "Dummy", "SELECT 1");
            Assert.True(con.State == System.Data.ConnectionState.Open);
            AssertOpenConnectionCount(1, ConnectionStringParameter);
            SqlTask.ExecuteNonQuery(con, "Dummy", "SELECT 1");
            AssertOpenConnectionCount(1, ConnectionStringParameter);
            Assert.True(con.State == System.Data.ConnectionState.Open);
            AssertOpenConnectionCount(1, ConnectionStringParameter);
            SqlConnection.ClearAllPools();

            //Assert
            AssertOpenConnectionCount(1, ConnectionStringParameter);
            con.Close();
            SqlConnection.ClearAllPools();
            AssertOpenConnectionCount(0, ConnectionStringParameter);
        }

        [Fact]
        public void TestLeaveConnectionOpenInParallel()
        {
            //Arrange
            SqlConnectionManager con = new SqlConnectionManager(ConnectionStringParameter)
            {
                LeaveOpen = true,
                MaxLoginAttempts = 1
            };

            //Act
            Assert.Throws<InvalidOperationException>(() =>
            {
                try
                {
                    Task t1 = Task.Factory.StartNew(() => SqlTask.ExecuteNonQuery(con, "Dummy", "WAITFOR DELAY '0:00:01.000'"));
                    Task t2 = Task.Factory.StartNew(() => SqlTask.ExecuteNonQuery(con, "Dummy", "WAITFOR DELAY '0:00:01.000'"));
                     t1.Start();
                    t2.Start();
                    Task.WaitAll(t1, t2);
                    //Parallel.Invoke(new ParallelOptions() { TaskScheduler = TaskScheduler.Default },
                    //           () => SqlTask.ExecuteNonQuery(con, "Dummy", "WAITFOR DELAY '0:00:01.000'"),
                    //           () => SqlTask.ExecuteNonQuery(con, "Dummy", "WAITFOR DELAY '0:00:01.000'")
                    //        ); ;
                }
                catch (AggregateException e)
                {
                    throw e.InnerException;
                }
            });

            con.Close();
            SqlConnection.ClearAllPools();
        }

        [Fact]
        public void TestCloningConnection()
        {
            //Arrange
            SqlConnectionManager con = new SqlConnectionManager(ConnectionStringParameter)
            {
                LeaveOpen = true
            };

            //Act
            IConnectionManager clone = con.Clone();

            //Assert
            Assert.Equal(clone, con);
        }
    }
}
